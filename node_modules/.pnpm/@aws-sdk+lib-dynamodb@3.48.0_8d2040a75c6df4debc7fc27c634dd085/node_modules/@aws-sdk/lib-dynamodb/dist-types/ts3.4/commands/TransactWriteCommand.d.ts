import { ConditionCheck, Delete, ItemCollectionMetrics, Put, TransactWriteItem, TransactWriteItemsCommandInput as __TransactWriteItemsCommandInput, TransactWriteItemsCommandOutput as __TransactWriteItemsCommandOutput, Update } from "@aws-sdk/client-dynamodb";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MiddlewareStack } from "@aws-sdk/types";
import { NativeAttributeValue } from "@aws-sdk/util-dynamodb";
import { DynamoDBDocumentClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DynamoDBDocumentClient";
export declare type TransactWriteCommandInput = Pick<__TransactWriteItemsCommandInput, Exclude<keyof __TransactWriteItemsCommandInput, "TransactItems">> & {
    TransactItems: (Pick<TransactWriteItem, Exclude<keyof TransactWriteItem, "ConditionCheck" | "Put" | "Delete" | "Update">> & {
        ConditionCheck?: Pick<ConditionCheck, Exclude<keyof ConditionCheck, "Key" | "ExpressionAttributeValues">> & {
            Key: {
                [key: string]: NativeAttributeValue;
            } | undefined;
            ExpressionAttributeValues?: {
                [key: string]: NativeAttributeValue;
            };
        };
        Put?: Pick<Put, Exclude<keyof Put, "Item" | "ExpressionAttributeValues">> & {
            Item: {
                [key: string]: NativeAttributeValue;
            } | undefined;
            ExpressionAttributeValues?: {
                [key: string]: NativeAttributeValue;
            };
        };
        Delete?: Pick<Delete, Exclude<keyof Delete, "Key" | "ExpressionAttributeValues">> & {
            Key: {
                [key: string]: NativeAttributeValue;
            } | undefined;
            ExpressionAttributeValues?: {
                [key: string]: NativeAttributeValue;
            };
        };
        Update?: Pick<Update, Exclude<keyof Update, "Key" | "ExpressionAttributeValues">> & {
            Key: {
                [key: string]: NativeAttributeValue;
            } | undefined;
            ExpressionAttributeValues?: {
                [key: string]: NativeAttributeValue;
            };
        };
    })[] | undefined;
};
export declare type TransactWriteCommandOutput = Pick<__TransactWriteItemsCommandOutput, Exclude<keyof __TransactWriteItemsCommandOutput, "ItemCollectionMetrics">> & {
    ItemCollectionMetrics?: {
        [key: string]: (Pick<ItemCollectionMetrics, Exclude<keyof ItemCollectionMetrics, "ItemCollectionKey">> & {
            ItemCollectionKey?: {
                [key: string]: NativeAttributeValue;
            };
        })[];
    };
};

export declare class TransactWriteCommand extends $Command<TransactWriteCommandInput, TransactWriteCommandOutput, DynamoDBDocumentClientResolvedConfig> {
    readonly input: TransactWriteCommandInput;
    private readonly inputKeyNodes;
    private readonly outputKeyNodes;
    constructor(input: TransactWriteCommandInput);
    
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DynamoDBDocumentClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TransactWriteCommandInput, TransactWriteCommandOutput>;
}
