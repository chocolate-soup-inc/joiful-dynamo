import { Get, ItemResponse, TransactGetItem, TransactGetItemsCommandInput as __TransactGetItemsCommandInput, TransactGetItemsCommandOutput as __TransactGetItemsCommandOutput } from "@aws-sdk/client-dynamodb";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MiddlewareStack } from "@aws-sdk/types";
import { NativeAttributeValue } from "@aws-sdk/util-dynamodb";
import { DynamoDBDocumentClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DynamoDBDocumentClient";
export declare type TransactGetCommandInput = Pick<__TransactGetItemsCommandInput, Exclude<keyof __TransactGetItemsCommandInput, "TransactItems">> & {
    TransactItems: (Pick<TransactGetItem, Exclude<keyof TransactGetItem, "Get">> & {
        Get: (Pick<Get, Exclude<keyof Get, "Key">> & {
            Key: {
                [key: string]: NativeAttributeValue;
            } | undefined;
        }) | undefined;
    })[] | undefined;
};
export declare type TransactGetCommandOutput = Pick<__TransactGetItemsCommandOutput, Exclude<keyof __TransactGetItemsCommandOutput, "Responses">> & {
    Responses?: (Pick<ItemResponse, Exclude<keyof ItemResponse, "Item">> & {
        Item?: {
            [key: string]: NativeAttributeValue;
        };
    })[];
};

export declare class TransactGetCommand extends $Command<TransactGetCommandInput, TransactGetCommandOutput, DynamoDBDocumentClientResolvedConfig> {
    readonly input: TransactGetCommandInput;
    private readonly inputKeyNodes;
    private readonly outputKeyNodes;
    constructor(input: TransactGetCommandInput);
    
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DynamoDBDocumentClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TransactGetCommandInput, TransactGetCommandOutput>;
}
