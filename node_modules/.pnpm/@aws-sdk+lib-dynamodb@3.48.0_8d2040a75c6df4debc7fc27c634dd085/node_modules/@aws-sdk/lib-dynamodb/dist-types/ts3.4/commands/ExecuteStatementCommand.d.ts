import { ExecuteStatementCommandInput as __ExecuteStatementCommandInput, ExecuteStatementCommandOutput as __ExecuteStatementCommandOutput } from "@aws-sdk/client-dynamodb";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MiddlewareStack } from "@aws-sdk/types";
import { NativeAttributeValue } from "@aws-sdk/util-dynamodb";
import { DynamoDBDocumentClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DynamoDBDocumentClient";
export declare type ExecuteStatementCommandInput = Pick<__ExecuteStatementCommandInput, Exclude<keyof __ExecuteStatementCommandInput, "Parameters">> & {
    Parameters?: NativeAttributeValue[];
};
export declare type ExecuteStatementCommandOutput = Pick<__ExecuteStatementCommandOutput, Exclude<keyof __ExecuteStatementCommandOutput, "Items">> & {
    Items?: {
        [key: string]: NativeAttributeValue;
    }[];
};

export declare class ExecuteStatementCommand extends $Command<ExecuteStatementCommandInput, ExecuteStatementCommandOutput, DynamoDBDocumentClientResolvedConfig> {
    readonly input: ExecuteStatementCommandInput;
    private readonly inputKeyNodes;
    private readonly outputKeyNodes;
    constructor(input: ExecuteStatementCommandInput);
    
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DynamoDBDocumentClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExecuteStatementCommandInput, ExecuteStatementCommandOutput>;
}
