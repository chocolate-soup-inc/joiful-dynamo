import { ExecuteTransactionCommandInput as __ExecuteTransactionCommandInput, ExecuteTransactionCommandOutput as __ExecuteTransactionCommandOutput, ItemResponse, ParameterizedStatement } from "@aws-sdk/client-dynamodb";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MiddlewareStack } from "@aws-sdk/types";
import { NativeAttributeValue } from "@aws-sdk/util-dynamodb";
import { DynamoDBDocumentClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DynamoDBDocumentClient";
export declare type ExecuteTransactionCommandInput = Pick<__ExecuteTransactionCommandInput, Exclude<keyof __ExecuteTransactionCommandInput, "TransactStatements">> & {
    TransactStatements: (Pick<ParameterizedStatement, Exclude<keyof ParameterizedStatement, "Parameters">> & {
        Parameters?: NativeAttributeValue[];
    })[] | undefined;
};
export declare type ExecuteTransactionCommandOutput = Pick<__ExecuteTransactionCommandOutput, Exclude<keyof __ExecuteTransactionCommandOutput, "Responses">> & {
    Responses?: (Pick<ItemResponse, Exclude<keyof ItemResponse, "Item">> & {
        Item?: {
            [key: string]: NativeAttributeValue;
        };
    })[];
};

export declare class ExecuteTransactionCommand extends $Command<ExecuteTransactionCommandInput, ExecuteTransactionCommandOutput, DynamoDBDocumentClientResolvedConfig> {
    readonly input: ExecuteTransactionCommandInput;
    private readonly inputKeyNodes;
    private readonly outputKeyNodes;
    constructor(input: ExecuteTransactionCommandInput);
    
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DynamoDBDocumentClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExecuteTransactionCommandInput, ExecuteTransactionCommandOutput>;
}
