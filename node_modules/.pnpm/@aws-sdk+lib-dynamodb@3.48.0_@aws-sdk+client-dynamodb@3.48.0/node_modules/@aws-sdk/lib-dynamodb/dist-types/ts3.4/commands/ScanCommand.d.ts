import { Condition, ScanCommandInput as __ScanCommandInput, ScanCommandOutput as __ScanCommandOutput } from "@aws-sdk/client-dynamodb";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MiddlewareStack } from "@aws-sdk/types";
import { NativeAttributeValue } from "@aws-sdk/util-dynamodb";
import { DynamoDBDocumentClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DynamoDBDocumentClient";
export declare type ScanCommandInput = Pick<__ScanCommandInput, Exclude<keyof __ScanCommandInput, "ScanFilter" | "ExclusiveStartKey" | "ExpressionAttributeValues">> & {
    ScanFilter?: {
        [key: string]: Pick<Condition, Exclude<keyof Condition, "AttributeValueList">> & {
            AttributeValueList?: NativeAttributeValue[];
        };
    };
    ExclusiveStartKey?: {
        [key: string]: NativeAttributeValue;
    };
    ExpressionAttributeValues?: {
        [key: string]: NativeAttributeValue;
    };
};
export declare type ScanCommandOutput = Pick<__ScanCommandOutput, Exclude<keyof __ScanCommandOutput, "Items" | "LastEvaluatedKey">> & {
    Items?: {
        [key: string]: NativeAttributeValue;
    }[];
    LastEvaluatedKey?: {
        [key: string]: NativeAttributeValue;
    };
};

export declare class ScanCommand extends $Command<ScanCommandInput, ScanCommandOutput, DynamoDBDocumentClientResolvedConfig> {
    readonly input: ScanCommandInput;
    private readonly inputKeyNodes;
    private readonly outputKeyNodes;
    constructor(input: ScanCommandInput);
    
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DynamoDBDocumentClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ScanCommandInput, ScanCommandOutput>;
}
