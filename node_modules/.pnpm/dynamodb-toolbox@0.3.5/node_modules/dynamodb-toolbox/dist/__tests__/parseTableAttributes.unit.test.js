"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const parseTableAttributes_1 = __importDefault(require("../lib/parseTableAttributes"));
let attrs = {
    pk: 'string',
    sk: 'string'
};
describe('parseTableAttributes', () => {
    it('parse simple attributes', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(parseTableAttributes_1.default(attrs, 'pk', 'sk')).toEqual({
            pk: { type: 'string', mappings: {} },
            sk: { type: 'string', mappings: {} }
        });
    }));
    // Removed this requirement
    it.skip('fails when attribute is missing type', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { test: {} }), 'pk', 'sk');
        }).toThrow(`Invalid or missing type for 'test'. Valid types are 'string', 'boolean', 'number', 'list', 'map', 'binary', and 'set'.`);
    }));
    it('fails when partitionKey is an invalid type', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { pk: 'map' }), 'pk', 'sk');
        }).toThrow(`Invalid or missing type for 'pk'. Valid types for partitionKey and sortKey are 'string','number' and 'binary'`);
    }));
    it('fails when sortKey is an invalid type', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { sk: 'map' }), 'pk', 'sk');
        }).toThrow(`Invalid or missing type for 'sk'. Valid types for partitionKey and sortKey are 'string','number' and 'binary'`);
    }));
    it('fails when attribute is an invalid type', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { test: 'not-a-type' }), 'pk', 'sk');
        }).toThrow(`Invalid or missing type for 'test'. Valid types are 'string', 'boolean', 'number', 'list', 'map', 'binary', and 'set'.`);
    }));
    it('fails when partitionKey is an invalid type (in object config)', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { pk: { type: 'map' } }), 'pk', 'sk');
        }).toThrow(`Invalid or missing type for 'pk'. Valid types for partitionKey and sortKey are 'string','number' and 'binary'`);
    }));
    it('fails when sortKey is an invalid type (in object config)', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { sk: { type: 'map' } }), 'pk', 'sk');
        }).toThrow(`Invalid or missing type for 'sk'. Valid types for partitionKey and sortKey are 'string','number' and 'binary'`);
    }));
    it('fails when attribute is an invalid type (in an object config)', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { test: { type: 'not-a-type' } }), 'pk', 'sk');
        }).toThrow(`Invalid or missing type for 'test'. Valid types are 'string', 'boolean', 'number', 'list', 'map', 'binary', and 'set'.`);
    }));
    it(`fails when attribute contains setType but isn't a set`, () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { test: { type: 'string', setType: 'string' } }), 'pk', 'sk');
        }).toThrow(`'setType' is only valid for type 'set'`);
    }));
    it(`fails when attribute contains invalid setType`, () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { test: { type: 'set', setType: 'invalid' } }), 'pk', 'sk');
        }).toThrow(`Invalid 'setType', must be 'string', 'number', or 'binary'`);
    }));
    it('fails when attribute has an invalid config option', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseTableAttributes_1.default(Object.assign({}, attrs, { test: { type: 'string', invalid: 'invalid' } }), 'pk', 'sk');
        }).toThrow(`'invalid' is not a valid property type`);
    }));
});
