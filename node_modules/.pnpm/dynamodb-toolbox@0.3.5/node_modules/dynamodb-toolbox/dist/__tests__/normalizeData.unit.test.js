"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const normalizeData_1 = __importDefault(require("../lib/normalizeData"));
const bootstrap_tests_1 = require("./bootstrap-tests");
// Import Table and Entity classes
const Table_1 = __importDefault(require("../classes/Table"));
const Entity_1 = __importDefault(require("../classes/Entity"));
// Create basic table
let DefaultTable = new Table_1.default({
    name: 'test-table',
    partitionKey: 'pk',
    sortKey: 'sk',
    DocumentClient: bootstrap_tests_1.DocumentClient
});
// Create basic entity
DefaultTable.entities = new Entity_1.default({
    name: 'User',
    attributes: {
        pk: { type: 'string', partitionKey: true },
        sk: { type: 'string', sortKey: true },
        set: { type: 'set', setType: 'string', alias: 'set_alias' },
        set_alias2: { type: 'set', setType: 'string', map: 'set2' },
        number: 'number',
        list: { type: 'list', alias: 'list_alias' },
        list_alias2: { type: 'list', map: 'list2' },
        test: 'map',
        linked1: ['sk', 0, { save: true }],
        linked2: ['sk', 1]
    }
});
// console.log(DefaultTable.User);
const attributes = DefaultTable.User.schema.attributes;
const linked = DefaultTable.User.linked;
describe('normalizeData', () => {
    it('converts entity input to table attributes', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = normalizeData_1.default(bootstrap_tests_1.DocumentClient)(attributes, linked, {
            pk: 'test',
            set_alias: ['1', '2', '3'],
            number: 1,
            test: { test: true },
            linked1: 'test1',
            linked2: 'test2',
            $remove: 'testx'
        });
        expect(result).toEqual({
            sk: 'test1#test2',
            pk: 'test',
            set: ['1', '2', '3'],
            number: 1,
            test: { test: true },
            linked1: 'test1',
            linked2: 'test2',
            $remove: 'testx'
        });
    }));
    it('filter out non-mapped fields', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = normalizeData_1.default(bootstrap_tests_1.DocumentClient)(attributes, linked, { pk: 'test', $remove: 'testx', notAField: 'test123' }, true);
        expect(result).toEqual({
            pk: 'test'
        });
    }));
    it('fails on non-mapped fields', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            normalizeData_1.default(bootstrap_tests_1.DocumentClient)(attributes, linked, {
                pk: 'test',
                $remove: 'testx',
                notAField: 'test123'
            });
        }).toThrow(`Field 'notAField' does not have a mapping or alias`);
    }));
});
