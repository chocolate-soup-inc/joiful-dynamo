"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-nocheck
const index_1 = require("../index");
const bootstrap_tests_1 = require("./bootstrap-tests");
const TestTable = new index_1.Table({
    name: 'test-table',
    partitionKey: 'pk',
    sortKey: 'sk',
    DocumentClient: bootstrap_tests_1.DocumentClient
});
const TestEntity = new index_1.Entity({
    name: 'TestEntity',
    autoExecute: false,
    attributes: {
        email: { type: 'string', partitionKey: true },
        sort: { type: 'string', sortKey: true },
        test: 'string'
    },
    table: TestTable
});
const TestTable2 = new index_1.Table({
    name: 'test-table',
    partitionKey: 'pk',
    sortKey: 'sk',
    DocumentClient: bootstrap_tests_1.DocumentClient
});
const TestEntity2 = new index_1.Entity({
    name: 'TestEntity',
    autoExecute: false,
    attributes: {
        pk: { type: 'string', partitionKey: true },
        sk: { type: 'string', sortKey: true },
        test: 'string'
    },
    table: TestTable2
});
describe.skip('get - integration', () => {
    it('gets the key from inputs (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        const { TableName, Key } = yield TestEntity.get({ pk: 'test-pk', sk: 'test-sk' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'test-pk', sk: 'test-sk' });
    }));
    it('gets the key from input aliases (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        let { TableName, Key } = yield TestEntity.get({ email: 'test-pk', sort: 'test-sk' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'test-pk', sk: 'test-sk' });
    }));
    it('filters out extra data (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        let { TableName, Key } = yield TestEntity.get({ pk: 'test-pk', sk: 'test-sk', test: 'test' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'test-pk', sk: 'test-sk' });
    }));
    it('coerces key values to correct types (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        let { TableName, Key } = yield TestEntity.get({ pk: 1, sk: true });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: '1', sk: 'true' });
    }));
    it('fails with undefined input (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(TestEntity.get()).rejects.toThrow(`'pk' or 'email' is required`);
    }));
    it('fails when missing the sortKey (async)', () => {
        expect(TestEntity.get({ pk: 'test-pk' })).rejects.toThrow(`'sk' or 'sort' is required`);
    });
    it('fails when missing partitionKey (no alias) (async)', () => {
        expect(TestEntity2.get()).rejects.toThrow(`'pk' is required`);
    });
    it('fails when missing the sortKey (no alias) (async)', () => {
        expect(TestEntity2.get({ pk: 'test-pk' })).rejects.toThrow(`'sk' is required`);
    });
});
