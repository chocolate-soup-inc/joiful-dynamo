"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validateTypes_1 = __importDefault(require("../lib/validateTypes"));
const bootstrap_tests_1 = require("./bootstrap-tests");
describe('validateTypes', () => {
    it('validates string', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'string' }, 'attr', 'string value');
        expect(result).toBe('string value');
    }));
    it('fails with invalid string', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'string' }, 'attr', []);
        }).toThrow(`'attr' must be of type string`);
    }));
    it('validates boolean', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'boolean' }, 'attr', false);
        expect(result).toBe(false);
    }));
    it('fails with invalid boolean', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'boolean' }, 'attr', 'string');
        }).toThrow(`'attr' must be of type boolean`);
    }));
    it('validates number (int)', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'number' }, 'attr', 123);
        expect(result).toBe(123);
    }));
    it('validates number (float)', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'number' }, 'attr', 1.23);
        expect(result).toBe(1.23);
    }));
    it('fails with invalid number', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'number' }, 'attr', 'string');
        }).toThrow(`'attr' must be of type number`);
    }));
    it('validates list', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'list' }, 'attr', [1, 2, 3]);
        expect(result).toEqual([1, 2, 3]);
    }));
    it('fails with invalid list', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'list' }, 'attr', false);
        }).toThrow(`'attr' must be a list (array)`);
    }));
    it('validates map', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'map' }, 'attr', { test: true });
        expect(result).toEqual({ test: true });
    }));
    it('fails with invalid map', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'map' }, 'attr', false);
        }).toThrow(`'attr' must be a map (object)`);
    }));
    it('validates set', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'set', setType: 'number' }, 'attr', [
            1,
            2,
            3
        ]);
        expect(result).toEqual(bootstrap_tests_1.DocumentClient.createSet([1, 2, 3]));
    }));
    it('fails with invalid set', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            validateTypes_1.default(bootstrap_tests_1.DocumentClient)({ type: 'set', setType: 'string' }, 'attr', false);
        }).toThrow(`'attr' must be a valid set (array)`);
    }));
    it('fails with parsing set if DocumentClient is missing', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            // @ts-expect-error
            validateTypes_1.default()({ type: 'set', setType: 'string' }, 'attr', []);
        }).toThrow(`DocumentClient required for this operation`);
    }));
    it('fails with parsing set if DocumentClient is missing', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            // @ts-expect-error
            validateTypes_1.default()({ type: 'set', setType: 'string', coerce: true }, 'attr', 'test');
        }).toThrow(`DocumentClient required for this operation`);
    }));
});
