"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const bootstrap_tests_1 = require("./bootstrap-tests");
const TestTable = new __1.Table({
    name: 'test-table',
    partitionKey: 'pk',
    sortKey: 'sk',
    DocumentClient: bootstrap_tests_1.DocumentClient
});
const TestEntity = new __1.Entity({
    name: 'TestEntity',
    autoExecute: false,
    attributes: {
        email: { type: 'string', partitionKey: true },
        sort: { type: 'string', sortKey: true },
        test: 'string'
    },
    table: TestTable
});
const TestTable2 = new __1.Table({
    name: 'test-table',
    partitionKey: 'pk',
    sortKey: 'sk',
    DocumentClient: bootstrap_tests_1.DocumentClient
});
const TestEntity2 = new __1.Entity({
    name: 'TestEntity',
    autoExecute: false,
    attributes: {
        pk: { type: 'string', partitionKey: true },
        sk: { type: 'string', sortKey: true },
        test: 'string'
    },
    table: TestTable2
});
describe('delete', () => {
    it('deletes the key from inputs (sync)', () => __awaiter(void 0, void 0, void 0, function* () {
        const { TableName, Key } = TestEntity.deleteParams({ email: 'test-pk', sort: 'test-sk' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'test-pk', sk: 'test-sk' });
    }));
    it('deletes the key from inputs (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        const { TableName, Key } = yield TestEntity.delete({ email: 'test-pk', sort: 'test-sk' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'test-pk', sk: 'test-sk' });
    }));
    it('filters out extra data (sync)', () => __awaiter(void 0, void 0, void 0, function* () {
        let { TableName, Key } = TestEntity.deleteParams({
            email: 'test-pk',
            sort: 'test-sk',
            // @ts-expect-error ðŸ’¥ TODO: This should not error as test can be used in default function
            test: 'test'
        });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'test-pk', sk: 'test-sk' });
    }));
    it('filters out extra data (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        let { TableName, Key } = yield TestEntity.delete({
            email: 'test-pk',
            sort: 'test-sk',
            // @ts-expect-error ðŸ’¥ TODO: This should not error as test can be used in default function
            test: 'test'
        });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'test-pk', sk: 'test-sk' });
    }));
    it('coerces key values to correct types (sync)', () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-expect-error ðŸ’¥ TODO: Support coerce keyword
        let { TableName, Key } = TestEntity.deleteParams({ email: 1, sort: true });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: '1', sk: 'true' });
    }));
    it('coerces key values to correct types (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-expect-error ðŸ’¥ TODO: Support coerce keyword
        let { TableName, Key } = yield TestEntity.delete({ email: 1, sort: true });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: '1', sk: 'true' });
    }));
    it('fails with undefined input (sync)', () => {
        // @ts-expect-error
        expect(() => TestEntity.deleteParams()).toThrow(`'pk' or 'email' is required`);
    });
    it('fails with undefined input (async)', () => __awaiter(void 0, void 0, void 0, function* () {
        // @ts-expect-error
        expect(TestEntity.delete()).rejects.toThrow(`'pk' or 'email' is required`);
    }));
    it('fails when missing the sortKey (sync)', () => {
        // @ts-expect-error
        expect(() => TestEntity.deleteParams({ email: 'test-pk' })).toThrow(`'sk' or 'sort' is required`);
    });
    it('fails when missing the sortKey (async)', () => {
        // @ts-expect-error
        expect(TestEntity.delete({ email: 'test-pk' })).rejects.toThrow(`'sk' or 'sort' is required`);
    });
    it('fails when missing partitionKey (no alias) (sync)', () => {
        // @ts-expect-error
        expect(() => TestEntity2.deleteParams()).toThrow(`'pk' is required`);
    });
    it('fails when missing partitionKey (no alias) (async)', () => {
        // @ts-expect-error
        expect(TestEntity2.delete()).rejects.toThrow(`'pk' is required`);
    });
    it('fails when missing the sortKey (no alias) (sync)', () => {
        // @ts-expect-error
        expect(() => TestEntity2.deleteParams({ pk: 'test-pk' })).toThrow(`'sk' is required`);
    });
    it('fails when missing the sortKey (no alias) (async)', () => {
        // @ts-expect-error
        expect(TestEntity2.delete({ pk: 'test-pk' })).rejects.toThrow(`'sk' is required`);
    });
    it('allows execute and parse options', () => {
        let { TableName, Key } = TestEntity.deleteParams({ email: 'x', sort: 'y' }, { execute: false, parse: false });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'x', sk: 'y' });
    });
    it('fails on extra options', () => {
        expect(() => TestEntity.deleteParams({ email: 'x', sort: 'y' }, 
        // @ts-expect-error
        { execute: false, parse: false, extra: true })).toThrow('Invalid delete options: extra');
    });
    it('fails on invalid capacity option', () => {
        expect(() => TestEntity.deleteParams({ email: 'x', sort: 'y' }, 
        // ðŸ’¥ TODO: Improve capacity type
        { capacity: 'test' })).toThrow(`'capacity' must be one of 'NONE','TOTAL', OR 'INDEXES'`);
    });
    it('fails on invalid metrics option', () => {
        expect(() => TestEntity.deleteParams({ email: 'x', sort: 'y' }, 
        // ðŸ’¥ TODO: Improve capacity type
        { metrics: 'test' })).toThrow(`'metrics' must be one of 'NONE' OR 'SIZE'`);
    });
    it('fails on invalid returnValues option', () => {
        expect(() => TestEntity.deleteParams({ email: 'x', sort: 'y' }, 
        // @ts-expect-error
        { returnValues: 'test' })).toThrow(`'returnValues' must be one of 'NONE' OR 'ALL_OLD'`);
    });
    it('sets capacity options', () => {
        let { TableName, Key, ReturnConsumedCapacity } = TestEntity.deleteParams({ email: 'x', sort: 'y' }, { capacity: 'none' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'x', sk: 'y' });
        expect(ReturnConsumedCapacity).toBe('NONE');
    });
    it('sets metrics options', () => {
        let { TableName, Key, ReturnItemCollectionMetrics } = TestEntity.deleteParams({ email: 'x', sort: 'y' }, { metrics: 'size' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'x', sk: 'y' });
        expect(ReturnItemCollectionMetrics).toBe('SIZE');
    });
    it('sets returnValues options', () => {
        let { TableName, Key, ReturnValues } = TestEntity.deleteParams({ email: 'x', sort: 'y' }, { returnValues: 'ALL_OLD' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'x', sk: 'y' });
        expect(ReturnValues).toBe('ALL_OLD');
    });
    it('sets conditions', () => {
        let result = TestEntity.deleteParams({ email: 'x', sort: 'y' }, { conditions: { attr: 'email', gt: 'test' } });
        expect(result).toEqual({
            TableName: 'test-table',
            Key: { pk: 'x', sk: 'y' },
            ExpressionAttributeNames: { '#attr1': 'pk' },
            ExpressionAttributeValues: { ':attr1': 'test' },
            ConditionExpression: '#attr1 > :attr1'
        });
    });
    it('handles extra parameters', () => {
        let { TableName, Key, ReturnConsumedCapacity } = TestEntity.deleteParams({ email: 'x', sort: 'y' }, {}, { ReturnConsumedCapacity: 'NONE' });
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'x', sk: 'y' });
        expect(ReturnConsumedCapacity).toBe('NONE');
    });
    it('handles invalid parameter input', () => {
        let { TableName, Key } = TestEntity.deleteParams({ email: 'x', sort: 'y' }, {}, 
        // @ts-expect-error
        'string');
        expect(TableName).toBe('test-table');
        expect(Key).toEqual({ pk: 'x', sk: 'y' });
    });
    it('formats a batch delete response', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = TestEntity.deleteBatch({ email: 'x', sort: 'y' });
        expect(result).toEqual({ 'test-table': { DeleteRequest: { Key: { pk: 'x', sk: 'y' } } } });
    }));
    it('fails if no value is provided to the deleteBatch method', () => {
        // @ts-expect-error
        expect(() => TestEntity.deleteBatch()).toThrow(`'pk' or 'email' is required`);
    });
    // Adding this for regression testing
    it('Non-Key Index Generated on Delete #74', () => __awaiter(void 0, void 0, void 0, function* () {
        const FoosTable = new __1.Table({
            name: 'test-table',
            partitionKey: 'pk',
            sortKey: 'sk',
            indexes: {
                'GSI-1': { partitionKey: 'gsi1pk', sortKey: 'gsi1sk' }
            },
            DocumentClient: bootstrap_tests_1.DocumentClient
        });
        const Foos = new __1.Entity({
            name: 'Foo',
            table: FoosTable,
            timestamps: true,
            attributes: {
                pk: { hidden: true, partitionKey: true, default: (data) => `FOO#${data.id}` },
                sk: { hidden: true, sortKey: true, default: (data) => `FOO#${data.id}` },
                // This next `default` gets executed on delete() and fails with "Cannot read property 'tenant' of undefined"
                gsi1pk: { hidden: true, default: (data) => `TENANT#${data.meta.tenant}` },
                gsi1sk: { hidden: true, default: (data) => `FOO#${data.id}` },
                id: { required: 'always' },
                meta: { type: 'map', required: 'always' },
                __context__: { hidden: true }
            }
        });
        const key = { id: 'xyz' };
        // @ts-expect-error ðŸ’¥ TODO: Because default can be a func, composite keys in deletes and gets should accept extra data
        let result = Foos.deleteParams(key); // Fails with v0.2.0-beta. Fine with v0.2.0-alpha
        expect(result).toEqual({ TableName: 'test-table', Key: { pk: 'FOO#xyz', sk: 'FOO#xyz' } });
    }));
});
