"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const parseCompositeKey_1 = __importDefault(require("../lib/parseCompositeKey"));
// Simulate attributes
const attributes = {
    sk: { type: 'string', sortKey: true }
};
const track = {
    fields: [],
    defaults: [],
    required: [],
    linked: {},
    keys: []
};
describe('parseCompositeKey', () => {
    it('converts item config to linked mapping', () => __awaiter(void 0, void 0, void 0, function* () {
        let result = parseCompositeKey_1.default('linked', ['sk', 0, { save: false }], track, attributes);
        expect(result).toEqual({
            linked: { save: false, type: 'string', coerce: true, link: 'sk', pos: 0 }
        });
        let result2 = parseCompositeKey_1.default('linked2', ['sk', 1], track, attributes);
        expect(result2).toEqual({
            linked2: { save: true, type: 'string', coerce: true, link: 'sk', pos: 1 }
        });
    }));
    it('fails on missing mapped field', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseCompositeKey_1.default('linked', ['skx', 0], track, attributes);
        }).toThrow(`'linked' must reference another field`);
    }));
    it('fails on non-numeric position', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            // @ts-expect-error
            parseCompositeKey_1.default('linked', ['sk', '1'], track, attributes);
        }).toThrow(`'linked' position value must be numeric`);
    }));
    it('fails on invalid configuration', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            // @ts-expect-error
            parseCompositeKey_1.default('linked', ['sk', 0, []], track, attributes);
        }).toThrow(`'linked' type must be 'string', 'number', 'boolean' or a configuration object`);
    }));
});
