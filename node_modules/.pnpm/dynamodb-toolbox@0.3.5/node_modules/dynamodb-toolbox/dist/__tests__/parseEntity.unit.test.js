"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const parseEntity_1 = __importDefault(require("../lib/parseEntity"));
// Simulate Entity config
const entity = {
    name: 'TestEntity',
    timestamps: true,
    created: '_created',
    createdAlias: 'createdAlias',
    modified: '_modified',
    modifiedAlias: 'modifiedAlias',
    typeAlias: 'typeAlias',
    attributes: {
        pk: { partitionKey: true },
        sk: { sortKey: true },
        attr1: 'number',
        attr2: { type: 'list', required: true }
    },
    autoExecute: true,
    autoParse: true
};
describe('parseEntity', () => {
    it('parses entity definition with all available options', () => __awaiter(void 0, void 0, void 0, function* () {
        let ent = parseEntity_1.default(entity);
        expect(ent.name).toBe('TestEntity');
        expect(ent.schema.keys).toEqual({ partitionKey: 'pk', sortKey: 'sk' });
        expect(ent.schema.attributes).toHaveProperty('_created');
        expect(ent.schema.attributes).toHaveProperty('_modified');
        expect(ent.schema.attributes).toHaveProperty('createdAlias');
        expect(ent.schema.attributes).toHaveProperty('modifiedAlias');
        expect(ent.required).toEqual({ attr2: false });
        expect(ent.linked).toEqual({});
        expect(ent.autoExecute).toBe(true);
        expect(ent.autoParse).toBe(true);
        expect(ent._etAlias).toBe('typeAlias');
    }));
    it('fails on extra config option', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            parseEntity_1.default(Object.assign({}, entity, { invalidConfig: true }));
        }).toThrow(`Invalid Entity configuration options: invalidConfig`);
    }));
});
