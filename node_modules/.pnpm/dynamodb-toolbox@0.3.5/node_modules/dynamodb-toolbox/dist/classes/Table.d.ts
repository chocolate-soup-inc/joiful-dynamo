/**
 * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB
 * @author Jeremy Daly <jeremy@jeremydaly.com>
 * @license MIT
 */
import DynamoDb, { DocumentClient } from 'aws-sdk/clients/dynamodb';
import { ParsedTable } from '../lib/parseTable';
import { FilterExpressions } from '../lib/expressionBuilder';
import { ProjectionAttributes } from '../lib/projectionBuilder';
import { ParsedEntity } from '../lib/parseEntity';
export interface TableConstructor {
    name: string;
    alias?: string | null;
    partitionKey: string;
    sortKey?: string | null;
    entityField?: boolean | string;
    attributes?: TableAttributes;
    indexes?: TableIndexes;
    autoExecute?: boolean;
    autoParse?: boolean;
    DocumentClient?: DynamoDb.DocumentClient;
    entities?: {};
    removeNullAttributes?: boolean;
}
export declare type DynamoDBTypes = 'string' | 'boolean' | 'number' | 'list' | 'map' | 'binary' | 'set';
export declare type DynamoDBSetTypes = 'string' | 'number' | 'binary';
export interface executeParse {
    execute?: boolean;
    parse?: boolean;
}
export interface TableAttributeConfig {
    type: DynamoDBTypes;
    setType?: DynamoDBSetTypes;
}
export interface TableAttributes {
    [attr: string]: DynamoDBTypes | TableAttributeConfig;
}
export interface ParsedTableAttribute {
    [attr: string]: TableAttributeConfig & {
        mappings: {};
    };
}
export interface TableIndexes {
    [index: string]: {
        partitionKey?: string;
        sortKey?: string;
    };
}
export interface queryOptions {
    index?: string;
    limit?: number;
    reverse?: boolean;
    consistent?: boolean;
    capacity?: DocumentClient.ReturnConsumedCapacity;
    select?: DocumentClient.Select;
    eq?: string | number;
    lt?: string | number;
    lte?: string | number;
    gt?: string | number;
    gte?: string | number;
    between?: [string, string] | [number, number];
    beginsWith?: string;
    filters?: FilterExpressions;
    attributes?: ProjectionAttributes;
    startKey?: {};
    entity?: string;
    execute?: boolean;
    parse?: boolean;
}
export interface scanOptions {
    index?: string;
    limit?: number;
    consistent?: boolean;
    capacity?: DocumentClient.ReturnConsumedCapacity;
    select?: DocumentClient.Select;
    filters?: FilterExpressions;
    attributes?: ProjectionAttributes;
    startKey?: {};
    segments?: number;
    segment?: number;
    entity?: string;
    execute?: boolean;
    parse?: boolean;
}
interface batchGetOptions {
    consistent?: boolean;
    capacity?: DocumentClient.ReturnConsumedCapacity;
    attributes?: ProjectionAttributes;
    include?: string[];
    execute?: boolean;
    parse?: boolean;
}
interface batchWriteOptions {
    capacity?: DocumentClient.ReturnConsumedCapacity;
    metrics?: DocumentClient.ReturnItemCollectionMetrics;
    execute?: boolean;
    parse?: boolean;
}
interface transactGetParamsOptions {
    capacity?: DocumentClient.ReturnConsumedCapacity;
}
declare type transactGetOptions = transactGetParamsOptions & executeParse;
interface transactWriteParamsOptions {
    capacity?: DocumentClient.ReturnConsumedCapacity;
    metrics?: DocumentClient.ReturnItemCollectionMetrics;
    token?: string;
}
declare type transactWriteOptions = transactWriteParamsOptions & executeParse;
interface transactGetParamsMeta {
    Entities: (any | undefined)[];
    payload: DocumentClient.TransactGetItemsInput;
}
declare class Table {
    private _execute;
    private _parse;
    _removeNulls: boolean;
    private _docClient?;
    private _entities;
    Table: ParsedTable['Table'];
    name: string;
    alias?: string;
    [key: string]: any;
    constructor(table: TableConstructor);
    set autoExecute(val: boolean);
    get autoExecute(): boolean;
    set autoParse(val: boolean);
    get autoParse(): boolean;
    set removeNullAttributes(val: boolean);
    get removeNullAttributes(): boolean;
    get DocumentClient(): (DocumentClient & {
        options?: {
            convertEmptyValues: boolean;
        };
    }) | undefined;
    set DocumentClient(docClient: (DocumentClient & {
        options?: {
            convertEmptyValues: boolean;
        };
    }) | undefined);
    /**
     * Adds an entity to the table
     * @param {Entity|Entity[]} Entity - An Entity or array of Entities to add to the table.
    */
    addEntity(entity: ParsedEntity | ParsedEntity[]): void;
    set entities(entity: any);
    get entities(): any;
    query(pk: any, options?: queryOptions, params?: Partial<DocumentClient.QueryInput>): Promise<any>;
    queryParams(pk: any, options?: queryOptions, params?: Partial<DocumentClient.QueryInput>, projections?: boolean): any;
    scan(options?: scanOptions, params?: Partial<DocumentClient.ScanInput>): Promise<any>;
    scanParams(options?: scanOptions, params?: Partial<DocumentClient.ScanInput>, meta?: boolean): any;
    batchGet(items: any, options?: batchGetOptions, params?: Partial<DocumentClient.BatchGetItemInput>): Promise<any>;
    parseBatchGetResponse(result: any, Tables: {
        [key: string]: Table;
    }, EntityProjections: {
        [key: string]: any;
    }, TableProjections: {
        [key: string]: string[];
    }, options?: batchGetOptions): any;
    batchGetParams(_items: any, options?: batchGetOptions, params?: Partial<DocumentClient.BatchGetItemInput>, meta?: boolean): ({
        RequestItems: DynamoDb.DocumentClient.BatchGetRequestMap;
    } & {
        ReturnConsumedCapacity: string;
    } & Partial<DynamoDb.DocumentClient.BatchGetItemInput>) | {
        payload: {
            RequestItems: DynamoDb.DocumentClient.BatchGetRequestMap;
        } & {
            ReturnConsumedCapacity: string;
        } & Partial<DynamoDb.DocumentClient.BatchGetItemInput>;
        Tables: {
            [key: string]: any;
        };
        EntityProjections: {
            [key: string]: any;
        };
        TableProjections: {
            [key: string]: any;
        };
    };
    batchWrite(items: any, options?: batchWriteOptions, params?: Partial<DocumentClient.BatchWriteItemInput>): Promise<any>;
    private parseBatchWriteResponse;
    /**
     * Generates parameters for a batchWrite
     * @param {object} items - An array of objects generated from putBatch and/or deleteBatch entity calls.
     * @param {object} [options] - Additional batchWrite options
     * @param {object} [params] - Additional DynamoDB parameters you wish to pass to the batchWrite request.
     * @param {boolean} [meta] - Internal flag to enable entity parsing
     *
    */
    batchWriteParams(_items: any, options?: batchWriteOptions, params?: Partial<DocumentClient.BatchWriteItemInput>, meta?: boolean): DynamoDb.DocumentClient.BatchWriteItemInput | {
        payload: DynamoDb.DocumentClient.BatchWriteItemInput;
        Tables: {};
    };
    /**
     * Performs a transactGet operation
     * @param {object} items - An array of objects generated from getTransaction entity calls.
     * @param {object} [options] - Additional transactGet options
     *
    */
    transactGet(items?: ({
        Entity?: any;
    } & DocumentClient.TransactGetItem)[], options?: transactGetOptions, params?: Partial<DocumentClient.TransactGetItemsInput>): Promise<DynamoDb.DocumentClient.TransactGetItemsInput | DynamoDb.DocumentClient.TransactGetItemsOutput>;
    /**
     * Generates parameters for a transactGet operation
     * @param {object} items - An array of objects generated from getTransaction entity calls.
     * @param {object} [options] - Additional transactGet options
     *
     * Creates a TransactGetItems object: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html
     */
    transactGetParams(_items: ({
        Entity?: any;
    } & DocumentClient.TransactGetItem)[], options?: transactGetParamsOptions, meta?: false | undefined): DocumentClient.TransactGetItemsInput;
    transactGetParams(_items: ({
        Entity?: any;
    } & DocumentClient.TransactGetItem)[], options: transactGetParamsOptions, meta: true): transactGetParamsMeta;
    /**
     * Performs a transactWrite operation
     * @param {object} items - An array of objects generated from putTransaction, updateTransaction, or deleteTransaction entity calls.
     * @param {object} [options] - Additional transactWrite options
     *
    */
    transactWrite(items: DocumentClient.TransactWriteItemList, options?: transactWriteOptions, params?: Partial<DocumentClient.TransactWriteItemsInput>): Promise<DynamoDb.DocumentClient.TransactWriteItemsInput | DynamoDb.DocumentClient.TransactWriteItemsOutput>;
    /**
     * Generates parameters for a transactWrite operation
     * @param {object} items - An array of objects generated from putTransaction, updateTransaction, or deleteTransaction entity calls.
     * @param {object} [options] - Additional options
     *
     * Creates a TransactWriteItems object: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html
     */
    transactWriteParams(_items: DocumentClient.TransactWriteItemList, options?: transactWriteParamsOptions): DocumentClient.TransactWriteItemsInput;
    parse(entity: string, input: any, include?: never[]): Promise<any>;
    get(entity: string, item?: {}, options?: {}, params?: {}): Promise<any>;
    delete(entity: string, item?: {}, options?: {}, params?: {}): Promise<any>;
    update(entity: string, item?: {}, options?: {}, params?: {}): Promise<any>;
    put(entity: string, item?: {}, options?: {}, params?: {}): Promise<any>;
}
export default Table;
