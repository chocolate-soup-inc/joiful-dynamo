/**
 * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB
 * @author Jeremy Daly <jeremy@jeremydaly.com>
 * @license MIT
 */
import Table, { DynamoDBSetTypes, DynamoDBTypes, queryOptions, scanOptions } from './Table';
import { DocumentClient } from 'aws-sdk/clients/dynamodb';
import { FilterExpressions } from '../lib/expressionBuilder';
import { ProjectionAttributes } from '../lib/projectionBuilder';
export declare type SchemaType = string | number | boolean | null | {
    [key: string]: SchemaType;
} | SchemaType[];
export interface EntityConstructor {
    name: string;
    timestamps?: boolean;
    created?: string;
    modified?: string;
    createdAlias?: string;
    modifiedAlias?: string;
    typeAlias?: string;
    attributes: EntityAttributes;
    autoExecute?: boolean;
    autoParse?: boolean;
    table?: Table;
}
export interface EntityAttributeConfig {
    type?: DynamoDBTypes;
    default?: any | ((data: object) => any);
    dependsOn?: string | string[];
    transform?: (value: any, data: {}) => any;
    coerce?: boolean;
    save?: boolean;
    onUpdate?: boolean;
    hidden?: boolean;
    required?: boolean | 'always';
    alias?: string;
    map?: string;
    setType?: DynamoDBSetTypes;
    partitionKey?: boolean | string | (string | boolean)[];
    delimiter?: string;
    sortKey?: boolean | string;
    prefix?: string;
    suffix?: string;
}
export declare type EntityCompositeAttributes = [(string), number, (string | EntityAttributeConfig)?];
export interface EntityAttributes {
    [attr: string]: DynamoDBTypes | EntityAttributeConfig | EntityCompositeAttributes;
}
export declare type EntityAttributeConfiguration = EntityAttributeConfig & {
    link?: string;
};
interface getOptions {
    consistent?: boolean;
    capacity?: DocumentClient.ReturnConsumedCapacity;
    attributes?: ProjectionAttributes;
    include?: string[];
    execute?: boolean;
    parse?: boolean;
}
interface deleteOptions {
    conditions?: FilterExpressions;
    capacity?: DocumentClient.ReturnConsumedCapacity;
    metrics?: DocumentClient.ReturnItemCollectionMetrics;
    returnValues?: DocumentClient.ReturnValue;
    include?: string[];
    execute?: boolean;
    parse?: boolean;
}
interface transactionOptions {
    conditions?: FilterExpressions;
    returnValues?: DocumentClient.ReturnValuesOnConditionCheckFailure;
}
interface putOptions {
    conditions?: FilterExpressions;
    capacity?: DocumentClient.ReturnConsumedCapacity;
    metrics?: DocumentClient.ReturnItemCollectionMetrics;
    returnValues?: DocumentClient.ReturnValue;
    include?: string[];
    execute?: boolean;
    parse?: boolean;
}
interface updateOptions {
    conditions?: FilterExpressions;
    capacity?: DocumentClient.ReturnConsumedCapacity;
    metrics?: DocumentClient.ReturnItemCollectionMetrics;
    returnValues?: DocumentClient.ReturnValue;
    include?: string[];
    execute?: boolean;
    parse?: boolean;
}
interface updateCustomParameters {
    SET?: string[];
    REMOVE?: string[];
    ADD?: string[];
    DELETE?: string[];
}
declare type updateCustomParams = updateCustomParameters & Partial<DocumentClient.UpdateItemInput>;
declare class Entity<Schema extends {
    [key in keyof Schema]: SchemaType;
}> {
    private _table?;
    private _execute?;
    private _parse?;
    name: string;
    schema: any;
    _etAlias: string;
    defaults: any;
    linked: any;
    required: any;
    constructor(entity: EntityConstructor);
    set table(table: Table);
    get table(): Table;
    get DocumentClient(): DocumentClient & {
        options?: {
            convertEmptyValues: boolean;
        } | undefined;
    };
    set autoExecute(val: boolean);
    get autoExecute(): boolean;
    set autoParse(val: boolean);
    get autoParse(): boolean;
    get partitionKey(): any;
    get sortKey(): any;
    attribute(attr: string): any;
    parse(input: any, include?: string[]): {};
    /**
     * Generate GET parameters and execute operation
     * @param {object} item - The keys from item you wish to get.
     * @param {object} [options] - Additional get options.
     * @param {object} [params] - Additional DynamoDB parameters you wish to pass to the get request.
     */
    get(item?: Partial<Schema>, options?: getOptions, params?: Partial<DocumentClient.GetItemInput>): Promise<any>;
    /**
     * Generate parameters for GET batch operation
     * @param {object} item - The keys from item you wish to get.
     */
    getBatch(item?: Partial<Schema>): {
        Table: Table;
        Key: any;
    };
    /**
     * Generate parameters for GET transaction operation
     * @param {object} item - The keys from item you wish to get.
     * @param {object} [options] - Additional get options
     *
     * Creates a Delete object: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Get.html
     */
    getTransaction(item?: Partial<Schema>, options?: {
        attributes?: ProjectionAttributes;
    }): {
        Entity: Entity<Schema>;
    } & DocumentClient.TransactGetItem;
    /**
     * Generate GET parameters
     * @param {object} item - The keys from item you wish to get.
     * @param {object} [options] - Additional get options.
     * @param {object} [params] - Additional DynamoDB parameters you wish to pass to the get request.
     */
    getParams(item?: Partial<Schema>, options?: getOptions, params?: Partial<DocumentClient.GetItemInput>): any;
    /**
     * Generate DELETE parameters and execute operation
     * @param {object} item - The keys from item you wish to delete.
     * @param {object} [options] - Additional delete options.
     * @param {object} [params] - Additional DynamoDB parameters you wish to pass to the delete request.
     */
    delete(item?: Partial<Schema>, options?: deleteOptions, params?: Partial<DocumentClient.DeleteItemInput>): Promise<any>;
    /**
     * Generate parameters for DELETE batch operation
     * @param {object} item - The keys from item you wish to delete.
     *
     * Only Key is supported (e.g. no conditions) https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html
     */
    deleteBatch(item?: Partial<Schema>): {
        [key: string]: DocumentClient.WriteRequest;
    };
    /**
     * Generate parameters for DELETE transaction operation
     * @param {object} item - The keys from item you wish to delete.
     * @param {object} [options] - Additional delete options
     *
     * Creates a Delete object: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Delete.html
     */
    deleteTransaction(item?: Partial<Schema>, options?: transactionOptions): {
        'Delete': DocumentClient.Delete;
    };
    /**
     * Generate DELETE parameters
     * @param {object} item - The keys from item you wish to delete.
     * @param {object} [options] - Additional delete options.
     * @param {object} [params] - Additional DynamoDB parameters you wish to pass to the delete request.
     */
    deleteParams(item?: Partial<Schema>, options?: deleteOptions, params?: Partial<DocumentClient.DeleteItemInput>): any;
    /**
     * Generate UPDATE parameters and execute operations
     * @param {object} item - The keys from item you wish to update.
     * @param {object} [options] - Additional update options.
     * @param {object} [params] - Additional DynamoDB parameters you wish to pass to the update request.
     */
    update(item?: Partial<Schema>, options?: updateOptions, params?: Partial<DocumentClient.UpdateItemInput>): Promise<DocumentClient.UpdateItemInput | import("aws-sdk/lib/request").PromiseResult<DocumentClient.UpdateItemOutput, import("aws-sdk/lib/error").AWSError>>;
    /**
     * Generate parameters for UPDATE transaction operation
     * @param {object} item - The item you wish to update.
     * @param {object} [options] - Additional update options
     *
     * Creates an Update object: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Update.html
     */
    updateTransaction(item?: Partial<Schema>, options?: transactionOptions): {
        'Update': DocumentClient.Update;
    };
    updateParams(item?: Partial<Schema>, options?: updateOptions, { SET, REMOVE, ADD, DELETE, ExpressionAttributeNames, ExpressionAttributeValues, ...params }?: updateCustomParams): DocumentClient.UpdateItemInput;
    put(item?: Partial<Schema>, options?: putOptions, params?: Partial<DocumentClient.PutItemInput>): Promise<any>;
    /**
     * Generate parameters for PUT batch operation
     * @param {object} item - The item you wish to put.
     *
     * Only Item is supported (e.g. no conditions) https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html
     */
    putBatch(item?: Partial<Schema>): {
        [key: string]: DocumentClient.WriteRequest;
    };
    /**
     * Generate parameters for PUT transaction operation
     * @param {object} item - The item you wish to put.
     * @param {object} [options] - Additional put options
     *
     * Creates a Put object: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Put.html
     */
    putTransaction(item?: Partial<Schema>, options?: transactionOptions): {
        'Put': DocumentClient.Put;
    };
    putParams(item?: Partial<Schema>, options?: putOptions, params?: Partial<DocumentClient.PutItemInput>): any;
    /**
     * Generate parameters for ConditionCheck transaction operation
     * @param {object} item - The keys from item you wish to check.
     * @param {object} [options] - Additional condition check options
     *
     * Creates a ConditionCheck object: https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ConditionCheck.html
     */
    conditionCheck(item?: Partial<Schema>, options?: transactionOptions): {
        'ConditionCheck': DocumentClient.ConditionCheck;
    };
    query(pk: any, options?: queryOptions, params?: Partial<DocumentClient.QueryInput>): Promise<any>;
    scan(options?: scanOptions, params?: Partial<DocumentClient.ScanInput>): Promise<any>;
}
export default Entity;
