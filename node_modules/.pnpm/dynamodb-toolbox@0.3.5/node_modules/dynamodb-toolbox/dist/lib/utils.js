"use strict";
/**
 * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB
 * @author Jeremy Daly <jeremy@jeremydaly.com>
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformAttr = exports.conditonError = exports.keyTypeError = exports.typeError = exports.error = exports.isEmpty = exports.hasValue = exports.toBool = exports.validKeyTypes = exports.validTypes = void 0;
exports.validTypes = ['string', 'boolean', 'number', 'list', 'map', 'binary', 'set'];
exports.validKeyTypes = ['string', 'number', 'binary'];
// Boolean conversion
const toBool = (val) => typeof val === 'boolean' ? val
    : ['false', '0', 'no'].includes(String(val).toLowerCase()) ? false
        : Boolean(val);
exports.toBool = toBool;
// has value shortcut
const hasValue = (val) => val !== undefined && val !== null;
exports.hasValue = hasValue;
// isEmpty object shortcut
const isEmpty = (val) => val === undefined || (typeof val === 'object' && Object.keys(val).length === 0);
exports.isEmpty = isEmpty;
// Inline error handler
const error = (err) => { throw new Error(err); };
exports.error = error;
// Standard type error
const typeError = (field) => {
    exports.error(`Invalid or missing type for '${field}'. `
        + `Valid types are '${exports.validTypes.slice(0, -1).join(`', '`)}',`
        + ` and '${exports.validTypes.slice(-1)}'.`);
};
exports.typeError = typeError;
// Key type error
const keyTypeError = (field) => {
    exports.error(`Invalid or missing type for '${field}'. `
        + `Valid types for partitionKey and sortKey are 'string','number' and 'binary'`);
};
exports.keyTypeError = keyTypeError;
// Condition error
const conditonError = (op) => exports.error(`You can only supply one sortKey condition per query. Already using '${op}'`);
exports.conditonError = conditonError;
// Transform attribute values
const transformAttr = (mapping, value, data) => {
    value = mapping.transform ? mapping.transform(value, data) : value;
    return mapping.prefix || mapping.suffix ?
        `${mapping.prefix || ''}${value}${mapping.suffix || ''}`
        : value;
};
exports.transformAttr = transformAttr;
