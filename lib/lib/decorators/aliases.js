"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformAliasAttributes = exports.aliases = exports.aliasTo = exports.setAliasDescriptor = exports.getAliasTarget = exports.getAliasesMap = void 0;
require("reflect-metadata");
const prop_1 = require("./prop");
const aliasesMapMetadataKey = Symbol('aliasesMap');
const getAliasesMap = (target) => {
    return Reflect.getMetadata(aliasesMapMetadataKey, target) || {};
};
exports.getAliasesMap = getAliasesMap;
const getAliasTarget = (target, key) => {
    return (0, exports.getAliasesMap)(target)[key] || key;
};
exports.getAliasTarget = getAliasTarget;
function setAliasDescriptor(target, aliasKey, propertyKey) {
    // SET THE ALIAS MAP IN THE INSTANCE
    let aliasesMap = Reflect.getMetadata(aliasesMapMetadataKey, target);
    if (aliasesMap == null)
        aliasesMap = {};
    aliasesMap[aliasKey] = propertyKey;
    Reflect.defineMetadata(aliasesMapMetadataKey, aliasesMap, target);
    Object.defineProperty(target, aliasKey, {
        get() {
            return this.getAttribute(propertyKey);
        },
        set(v) {
            this.setAttribute(propertyKey, v);
        },
        configurable: true,
        enumerable: false,
    });
}
exports.setAliasDescriptor = setAliasDescriptor;
function aliasTo(aliasToName) {
    return (target, propertyKey) => {
        // TARGET IS THE CLASS PROTOTYPE
        (0, prop_1.setPropGettersAndSetters)(target, aliasToName);
        setAliasDescriptor(target, propertyKey, aliasToName);
    };
}
exports.aliasTo = aliasTo;
function aliases(aliasesNames) {
    return (target, propertyKey) => {
        // TARGET IS THE CLASS PROTOTYPE
        (0, prop_1.setPropGettersAndSetters)(target, propertyKey);
        for (const alias of aliasesNames) {
            setAliasDescriptor(target, alias, propertyKey);
        }
    };
}
exports.aliases = aliases;
function transformAliasAttributes(target, item) {
    return Object.entries(item).reduce((agg, [key, value]) => {
        agg[(0, exports.getAliasTarget)(target, key)] = value;
        return agg;
    }, {});
}
exports.transformAliasAttributes = transformAliasAttributes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxpYXNlcy5qcyIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlcyI6WyJsaWIvZGVjb3JhdG9ycy9hbGlhc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRCQUEwQjtBQUMxQixpQ0FBa0Q7QUFFbEQsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFNUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUFXLEVBQTBCLEVBQUU7SUFDbkUsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsRSxDQUFDLENBQUM7QUFGVyxRQUFBLGFBQWEsaUJBRXhCO0FBRUssTUFBTSxjQUFjLEdBQUcsQ0FBQyxNQUFXLEVBQUUsR0FBVyxFQUFVLEVBQUU7SUFDakUsT0FBTyxJQUFBLHFCQUFhLEVBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDO0FBQzNDLENBQUMsQ0FBQztBQUZXLFFBQUEsY0FBYyxrQkFFekI7QUFFRixTQUFnQixrQkFBa0IsQ0FBQyxNQUFXLEVBQUUsUUFBZ0IsRUFBRSxXQUFtQjtJQUNuRixvQ0FBb0M7SUFDcEMsSUFBSSxVQUFVLEdBQTJCLE9BQU8sQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFNUYsSUFBSSxVQUFVLElBQUksSUFBSTtRQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDeEMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFdBQVcsQ0FBQztJQUVuQyxPQUFPLENBQUMsY0FBYyxDQUFDLHFCQUFxQixFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVsRSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7UUFDdEMsR0FBRztZQUNELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4QyxDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQyxDQUFDO1FBQ0QsWUFBWSxFQUFFLElBQUk7UUFDbEIsVUFBVSxFQUFFLEtBQUs7S0FDbEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQW5CRCxnREFtQkM7QUFFRCxTQUFnQixPQUFPLENBQUMsV0FBbUI7SUFDekMsT0FBTyxDQUFDLE1BQVcsRUFBRSxXQUFtQixFQUFRLEVBQUU7UUFDaEQsZ0NBQWdDO1FBQ2hDLElBQUEsK0JBQXdCLEVBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQU5ELDBCQU1DO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLFlBQXNCO0lBQzVDLE9BQU8sQ0FBQyxNQUFXLEVBQUUsV0FBbUIsRUFBUSxFQUFFO1FBQ2hELGdDQUFnQztRQUNoQyxJQUFBLCtCQUF3QixFQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUU5QyxLQUFLLE1BQU0sS0FBSyxJQUFJLFlBQVksRUFBRTtZQUNoQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQVRELDBCQVNDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsTUFBVyxFQUFFLElBQXlCO0lBQzdFLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFnQixFQUFFLEVBQUU7UUFDdEUsR0FBRyxDQUFDLElBQUEsc0JBQWMsRUFBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDekMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLEVBQUUsRUFBeUIsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFMRCw0REFLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgeyBzZXRQcm9wR2V0dGVyc0FuZFNldHRlcnMgfSBmcm9tICcuL3Byb3AnO1xuXG5jb25zdCBhbGlhc2VzTWFwTWV0YWRhdGFLZXkgPSBTeW1ib2woJ2FsaWFzZXNNYXAnKTtcblxuZXhwb3J0IGNvbnN0IGdldEFsaWFzZXNNYXAgPSAodGFyZ2V0OiBhbnkpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0+IHtcbiAgcmV0dXJuIFJlZmxlY3QuZ2V0TWV0YWRhdGEoYWxpYXNlc01hcE1ldGFkYXRhS2V5LCB0YXJnZXQpIHx8IHt9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEFsaWFzVGFyZ2V0ID0gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBnZXRBbGlhc2VzTWFwKHRhcmdldClba2V5XSB8fCBrZXk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0QWxpYXNEZXNjcmlwdG9yKHRhcmdldDogYW55LCBhbGlhc0tleTogc3RyaW5nLCBwcm9wZXJ0eUtleTogc3RyaW5nKTogdm9pZCB7XG4gIC8vIFNFVCBUSEUgQUxJQVMgTUFQIElOIFRIRSBJTlNUQU5DRVxuICBsZXQgYWxpYXNlc01hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoYWxpYXNlc01hcE1ldGFkYXRhS2V5LCB0YXJnZXQpO1xuXG4gIGlmIChhbGlhc2VzTWFwID09IG51bGwpIGFsaWFzZXNNYXAgPSB7fTtcbiAgYWxpYXNlc01hcFthbGlhc0tleV0gPSBwcm9wZXJ0eUtleTtcblxuICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKGFsaWFzZXNNYXBNZXRhZGF0YUtleSwgYWxpYXNlc01hcCwgdGFyZ2V0KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBhbGlhc0tleSwge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShwcm9wZXJ0eUtleSk7XG4gICAgfSxcbiAgICBzZXQodikge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUocHJvcGVydHlLZXksIHYpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsaWFzVG8oYWxpYXNUb05hbWU6IHN0cmluZykge1xuICByZXR1cm4gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgLy8gVEFSR0VUIElTIFRIRSBDTEFTUyBQUk9UT1RZUEVcbiAgICBzZXRQcm9wR2V0dGVyc0FuZFNldHRlcnModGFyZ2V0LCBhbGlhc1RvTmFtZSk7XG4gICAgc2V0QWxpYXNEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXksIGFsaWFzVG9OYW1lKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsaWFzZXMoYWxpYXNlc05hbWVzOiBzdHJpbmdbXSkge1xuICByZXR1cm4gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgLy8gVEFSR0VUIElTIFRIRSBDTEFTUyBQUk9UT1RZUEVcbiAgICBzZXRQcm9wR2V0dGVyc0FuZFNldHRlcnModGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG5cbiAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXNOYW1lcykge1xuICAgICAgc2V0QWxpYXNEZXNjcmlwdG9yKHRhcmdldCwgYWxpYXMsIHByb3BlcnR5S2V5KTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1BbGlhc0F0dHJpYnV0ZXModGFyZ2V0OiBhbnksIGl0ZW06IFJlY29yZDxzdHJpbmcsIGFueT4pIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGl0ZW0pLnJlZHVjZSgoYWdnLCBba2V5LCB2YWx1ZV06IFtzdHJpbmcsIGFueV0pID0+IHtcbiAgICBhZ2dbZ2V0QWxpYXNUYXJnZXQodGFyZ2V0LCBrZXkpXSA9IHZhbHVlO1xuICAgIHJldHVybiBhZ2c7XG4gIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIGFueT4pO1xufVxuIl19