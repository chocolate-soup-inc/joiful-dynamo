"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prop = exports.setPropGettersAndSetters = exports.setPropDescriptor = exports.getUpdatedAtKey = exports.getCreatedAtKey = exports.getSecondaryKey = exports.getPrimaryKey = void 0;
require("reflect-metadata");
const propMetadataKey = Symbol('prop');
const primaryKeyMetadataKey = 'primaryKey';
const secondaryKeyMetadataKey = 'secondaryKey';
const createdAtKeyMetadataKey = 'createdAtKey';
const updatedAtKeyMetadataKey = 'updatedAtKey';
function getPrimaryKey(target) {
    return Reflect.getMetadata(primaryKeyMetadataKey, target);
}
exports.getPrimaryKey = getPrimaryKey;
function getSecondaryKey(target) {
    return Reflect.getMetadata(secondaryKeyMetadataKey, target);
}
exports.getSecondaryKey = getSecondaryKey;
function getCreatedAtKey(target) {
    return Reflect.getMetadata(createdAtKeyMetadataKey, target);
}
exports.getCreatedAtKey = getCreatedAtKey;
function getUpdatedAtKey(target) {
    return Reflect.getMetadata(updatedAtKeyMetadataKey, target);
}
exports.getUpdatedAtKey = getUpdatedAtKey;
function setPropDescriptor(target, propertyKey) {
    Object.defineProperty(target, propertyKey, {
        get() {
            return this.getAttribute(propertyKey);
        },
        set(v) {
            this.setAttribute(propertyKey, v);
        },
        configurable: true,
        enumerable: true,
    });
}
exports.setPropDescriptor = setPropDescriptor;
function setPropGettersAndSetters(target, propertyKey) {
    // SET THE LIST OF VALIDATED PROPERTIES IN THE INSTANCE
    const properties = Reflect.getMetadata(propMetadataKey, target) || [];
    if (properties.includes(propertyKey))
        return;
    properties.push(propertyKey);
    Reflect.defineMetadata(propMetadataKey, properties, target);
    if (Object.getOwnPropertyDescriptor(target, propertyKey) == null) {
        setPropDescriptor(target, propertyKey);
    }
}
exports.setPropGettersAndSetters = setPropGettersAndSetters;
function prop(opts) {
    return (target, propertyKey) => {
        // TARGET IS THE CLASS PROTOTYPE
        setPropGettersAndSetters(target, propertyKey);
        const obj = {
            [primaryKeyMetadataKey]: opts === null || opts === void 0 ? void 0 : opts.primaryKey,
            [secondaryKeyMetadataKey]: opts === null || opts === void 0 ? void 0 : opts.secondaryKey,
            [createdAtKeyMetadataKey]: opts === null || opts === void 0 ? void 0 : opts.createdAt,
            [updatedAtKeyMetadataKey]: opts === null || opts === void 0 ? void 0 : opts.updatedAt,
        };
        Object.entries(obj).forEach(([key, value]) => {
            if (value) {
                const currentValue = Reflect.getMetadata(key, target);
                if (currentValue != null) {
                    throw new Error(`Cannot have 2 properties as ${key}`);
                }
                else {
                    Reflect.defineMetadata(key, propertyKey, target);
                }
            }
        });
    };
}
exports.prop = prop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcC5qcyIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlcyI6WyJsaWIvZGVjb3JhdG9ycy9wcm9wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRCQUEwQjtBQVMxQixNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkMsTUFBTSxxQkFBcUIsR0FBRyxZQUFZLENBQUM7QUFDM0MsTUFBTSx1QkFBdUIsR0FBRyxjQUFjLENBQUM7QUFDL0MsTUFBTSx1QkFBdUIsR0FBRyxjQUFjLENBQUM7QUFDL0MsTUFBTSx1QkFBdUIsR0FBRyxjQUFjLENBQUM7QUFFL0MsU0FBZ0IsYUFBYSxDQUFDLE1BQVc7SUFDdkMsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFGRCxzQ0FFQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxNQUFXO0lBQ3pDLE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQixlQUFlLENBQUMsTUFBVztJQUN6QyxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQUZELDBDQUVDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLE1BQVc7SUFDekMsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLHVCQUF1QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFGRCwwQ0FFQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLE1BQVcsRUFBRSxXQUFtQjtJQUNoRSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUU7UUFDekMsR0FBRztZQUNELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4QyxDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQyxDQUFDO1FBQ0QsWUFBWSxFQUFFLElBQUk7UUFDbEIsVUFBVSxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQVhELDhDQVdDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsTUFBVyxFQUFFLFdBQW1CO0lBQ3ZFLHVEQUF1RDtJQUN2RCxNQUFNLFVBQVUsR0FBYSxPQUFPLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFaEYsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUFFLE9BQU87SUFFN0MsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3QixPQUFPLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFNUQsSUFBSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNoRSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDeEM7QUFDSCxDQUFDO0FBWkQsNERBWUM7QUFFRCxTQUFnQixJQUFJLENBQUMsSUFBa0I7SUFDckMsT0FBTyxDQUFDLE1BQVcsRUFBRSxXQUFtQixFQUFFLEVBQUU7UUFDMUMsZ0NBQWdDO1FBQ2hDLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUU5QyxNQUFNLEdBQUcsR0FBRztZQUNWLENBQUMscUJBQXFCLENBQUMsRUFBRSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsVUFBVTtZQUN6QyxDQUFDLHVCQUF1QixDQUFDLEVBQUUsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFlBQVk7WUFDN0MsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxTQUFTO1lBQzFDLENBQUMsdUJBQXVCLENBQUMsRUFBRSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsU0FBUztTQUMzQyxDQUFDO1FBRUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQzNDLElBQUksS0FBSyxFQUFFO2dCQUNULE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLFlBQVksSUFBSSxJQUFJLEVBQUU7b0JBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLEdBQUcsRUFBRSxDQUFDLENBQUM7aUJBQ3ZEO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDbEQ7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQXZCRCxvQkF1QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuXG50eXBlIFByb3BPcHRpb25zID0ge1xuICBwcmltYXJ5S2V5PzogYm9vbGVhbjtcbiAgc2Vjb25kYXJ5S2V5PzogYm9vbGVhbjtcbiAgY3JlYXRlZEF0PzogYm9vbGVhbjtcbiAgdXBkYXRlZEF0PzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IHByb3BNZXRhZGF0YUtleSA9IFN5bWJvbCgncHJvcCcpO1xuY29uc3QgcHJpbWFyeUtleU1ldGFkYXRhS2V5ID0gJ3ByaW1hcnlLZXknO1xuY29uc3Qgc2Vjb25kYXJ5S2V5TWV0YWRhdGFLZXkgPSAnc2Vjb25kYXJ5S2V5JztcbmNvbnN0IGNyZWF0ZWRBdEtleU1ldGFkYXRhS2V5ID0gJ2NyZWF0ZWRBdEtleSc7XG5jb25zdCB1cGRhdGVkQXRLZXlNZXRhZGF0YUtleSA9ICd1cGRhdGVkQXRLZXknO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJpbWFyeUtleSh0YXJnZXQ6IGFueSk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiBSZWZsZWN0LmdldE1ldGFkYXRhKHByaW1hcnlLZXlNZXRhZGF0YUtleSwgdGFyZ2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlY29uZGFyeUtleSh0YXJnZXQ6IGFueSk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiBSZWZsZWN0LmdldE1ldGFkYXRhKHNlY29uZGFyeUtleU1ldGFkYXRhS2V5LCB0YXJnZXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3JlYXRlZEF0S2V5KHRhcmdldDogYW55KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIFJlZmxlY3QuZ2V0TWV0YWRhdGEoY3JlYXRlZEF0S2V5TWV0YWRhdGFLZXksIHRhcmdldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVcGRhdGVkQXRLZXkodGFyZ2V0OiBhbnkpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gUmVmbGVjdC5nZXRNZXRhZGF0YSh1cGRhdGVkQXRLZXlNZXRhZGF0YUtleSwgdGFyZ2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFByb3BEZXNjcmlwdG9yKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKTogdm9pZCB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKHByb3BlcnR5S2V5KTtcbiAgICB9LFxuICAgIHNldCh2KSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShwcm9wZXJ0eUtleSwgdik7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQcm9wR2V0dGVyc0FuZFNldHRlcnModGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgLy8gU0VUIFRIRSBMSVNUIE9GIFZBTElEQVRFRCBQUk9QRVJUSUVTIElOIFRIRSBJTlNUQU5DRVxuICBjb25zdCBwcm9wZXJ0aWVzOiBzdHJpbmdbXSA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEocHJvcE1ldGFkYXRhS2V5LCB0YXJnZXQpIHx8IFtdO1xuXG4gIGlmIChwcm9wZXJ0aWVzLmluY2x1ZGVzKHByb3BlcnR5S2V5KSkgcmV0dXJuO1xuXG4gIHByb3BlcnRpZXMucHVzaChwcm9wZXJ0eUtleSk7XG4gIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEocHJvcE1ldGFkYXRhS2V5LCBwcm9wZXJ0aWVzLCB0YXJnZXQpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpID09IG51bGwpIHtcbiAgICBzZXRQcm9wRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcChvcHRzPzogUHJvcE9wdGlvbnMpIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykgPT4ge1xuICAgIC8vIFRBUkdFVCBJUyBUSEUgQ0xBU1MgUFJPVE9UWVBFXG4gICAgc2V0UHJvcEdldHRlcnNBbmRTZXR0ZXJzKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuXG4gICAgY29uc3Qgb2JqID0ge1xuICAgICAgW3ByaW1hcnlLZXlNZXRhZGF0YUtleV06IG9wdHM/LnByaW1hcnlLZXksXG4gICAgICBbc2Vjb25kYXJ5S2V5TWV0YWRhdGFLZXldOiBvcHRzPy5zZWNvbmRhcnlLZXksXG4gICAgICBbY3JlYXRlZEF0S2V5TWV0YWRhdGFLZXldOiBvcHRzPy5jcmVhdGVkQXQsXG4gICAgICBbdXBkYXRlZEF0S2V5TWV0YWRhdGFLZXldOiBvcHRzPy51cGRhdGVkQXQsXG4gICAgfTtcblxuICAgIE9iamVjdC5lbnRyaWVzKG9iaikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gUmVmbGVjdC5nZXRNZXRhZGF0YShrZXksIHRhcmdldCk7XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGhhdmUgMiBwcm9wZXJ0aWVzIGFzICR7a2V5fWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoa2V5LCBwcm9wZXJ0eUtleSwgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuIl19