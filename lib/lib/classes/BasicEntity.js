"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicEntity = void 0;
const joi_1 = __importDefault(require("joi"));
const lodash_1 = __importDefault(require("lodash"));
const decorators_1 = require("../decorators");
class BasicEntity {
    // ---------------- BASIC ATTRIBUTES SETTINGS ----------------
    constructor(item = {}) {
        this._attributes = {};
        this.attributes = item;
        this.getAttribute = this.getAttribute.bind(this);
        this.setAttribute = this.setAttribute.bind(this);
    }
    get attributes() {
        return this._attributes || {};
    }
    set attributes(attributes) {
        // WE SHOULD ORGANIZE THE ENTRIES ORDER SO IT SETS THE CHILD PROPERTIES BEFORE SETTING THE REST (SO IT DOES NOT OVERWRITE)
        const entries = Object.entries(attributes);
        const hasOneModels = (0, decorators_1.getHasOneModels)(this) || [];
        const hasManyModels = (0, decorators_1.getHasManyModels)(this) || [];
        const allModels = hasOneModels.concat(hasManyModels);
        entries.sort(([aKey], [bKey]) => {
            if (allModels.includes(aKey) && !allModels.includes(bKey))
                return -1;
            if (!allModels.includes(aKey) && allModels.includes(bKey))
                return 1;
            return 0;
        });
        for (const [key, value] of entries) {
            (0, decorators_1.setPropGettersAndSetters)(this.constructor.prototype, key);
            this[key] = value;
        }
    }
    getAttribute(key) {
        return this.attributes[key];
    }
    setAttribute(key, value) {
        this.attributes[key] = value;
    }
    get enumerableAttributes() {
        return Object.keys(this.constructor.prototype).reduce((agg, key) => {
            let value;
            if (this.relatedNotNestedModels.includes(key)) {
                value = this[`_noInitializer${lodash_1.default.capitalize(key)}`];
            }
            else {
                value = this[key];
            }
            if (value !== undefined)
                agg[key] = value;
            return agg;
        }, {});
    }
    get transformedAttributes() {
        let attributes = (0, decorators_1.transformAliasAttributes)(this, this.enumerableAttributes);
        attributes = (0, decorators_1.transformHasManyAttributes)(this, attributes);
        attributes = (0, decorators_1.transformHasOneAttributes)(this, attributes);
        attributes = (0, decorators_1.transformCompositeKeyAttributes)(this, attributes);
        return attributes;
    }
    get validatedAttributes() {
        return (0, decorators_1.validateAttributes)(this, this.transformedAttributes);
    }
    get finalAttributes() {
        return this.validatedAttributes;
    }
    // ---------------- BASIC ATTRIBUTES SETTINGS ----------------
    // ---------------- VALIDATION SUPPORT SETTINGS ----------------
    get relatedNotNestedModels() {
        return (0, decorators_1.getHasOneNotNestedModels)(this).concat((0, decorators_1.getHasManyNotNestedModels)(this));
    }
    validateRelatedModels(_throw = false) {
        for (const hasOneModel of (0, decorators_1.getHasOneNotNestedModels)(this)) {
            const instance = this[`_noInitializer${lodash_1.default.capitalize(hasOneModel)}`];
            if (instance == null) {
                const { opts: { required = false, } = {}, } = (0, decorators_1.getHasOneModel)(this, hasOneModel) || {};
                if (required) {
                    const error = new joi_1.default.ValidationError(`"${hasOneModel}" is required.`, this, this.attributes);
                    if (_throw) {
                        throw error;
                    }
                    else {
                        this._error = error;
                        return false;
                    }
                }
                else {
                    continue;
                }
            }
            const valid = instance.validate(_throw);
            if (!valid) {
                this._error = instance.error;
                return false;
            }
        }
        return true;
    }
    validate(_throw = false) {
        this._error = undefined;
        try {
            (0, decorators_1.validateAttributes)(this, this.transformedAttributes);
            this.validateRelatedModels(true);
            return true;
        }
        catch (error) {
            if (_throw) {
                throw error;
            }
            else if (error instanceof joi_1.default.ValidationError) {
                this._error = error;
                return false;
            }
            throw error;
        }
    }
    get valid() {
        return this.validate();
    }
    get error() {
        return this._error;
    }
    // ---------------- VALIDATION SETTINGS ----------------
    // ---------------- STATIC METHODS ----------------
    static transformAttributes(item) {
        return new this(item).transformedAttributes;
    }
    static validateAttributes(item) {
        return new this(item).validatedAttributes;
    }
    static validate(item, _throw = true) {
        return new this(item).validate(_throw);
    }
}
exports.BasicEntity = BasicEntity;
//# sourceMappingURL=data:application/json;base64,